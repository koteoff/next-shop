generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL") // uses connection pooling
    
}
model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())
    name     String
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    addservices AddServices[]
    items ProductItem[]

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    firmId Int @default(0) // новое поле для связи с моделью Firm
    firm Firm @relation(fields: [firmId], references: [id]) // связь с моделью Firm
}

model Firm {
    id Int @id @default(autoincrement())
    name String 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    products Product[]
    items ProductItem[]
}
model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    BoxType Int @default(0)

    product   Product @relation(fields: [productId], references: [id])
    productId Int
    firmId Int @default(0) // новое поле для связи с моделью Firm
    firm Firm @relation(fields: [firmId], references: [id]) // связь с моделью Firm

    CartItem CartItem[]
}
model AddServices {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products  Product[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CartItem CartItem[]
}
model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    items CartItem[]
}
model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    addservices AddServices[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}
model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}
model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}
enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}
enum UserRole {
    USER
    ADMIN
}



